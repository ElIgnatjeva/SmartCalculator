#include "calc.h"
#include "test_function.h"

#test expression_1
double result = 0.0;
double expected = 10.0;
test_calculator("5 + 5", "0", &result, &expected);

#test expression_2
double result = 0.0;
double expected = -78546.476923;
test_calculator("12-32*(2143-312*(4-5)-1.32/(83.2/3))", "0", &result, &expected);

#test expression_3
double result = 0.0;
double expected = 0.0;
test_calculator("32mod(32-30)", "0", &result, &expected);

#test expression_4
double result = 0.0;
double expected = -120526.054910;
test_calculator("11-(123124.0001+(42-32.327)-32)*423/432", "0", &result, &expected);

#test expression_5
double result = 0.0;
double expected = 0.669268;
test_calculator("(0.432*54.2/4^2-(-8*4))*0.02", "0", &result, &expected);

#test expression_6
double result = 0.0;
double expected = 1.5;
test_calculator("(2+3/2)mod2", "0", &result, &expected);

#test expression_7
double result = 0.0;
double expected = 2769.160611;
test_calculator("(1+(1*(4*(5^4+(3*2*1.1/(3*sin(2*cos(1235.3)*2)))))))", "0", &result, &expected);

#test expression_8
double result = 0.0;
double expected = 0.540302;
test_calculator("cos(1)", "0", &result, &expected);

#test expression_9
double result = 0.0;
double expected = 1.029639;
test_calculator("tan(0.8)", "0", &result, &expected);

#test expression_10
double result = 0.0;
double expected = 0.674741;
test_calculator("atan(0.8)", "0", &result, &expected);

#test expression_13
double result = 0.0;
double expected = 1.369438;
test_calculator("acos(0.2)", "0", &result, &expected);

#test expression_14
double result = 0.0;
double expected = 4;
test_calculator("sqrt(16)", "0", &result, &expected);

#test expression_15
double result = 0.0;
double expected = 53304.710856;
test_calculator("ln(2)+ln(3)-4+(5*6)^3.2+sin(10)", "0", &result, &expected);

#test expression_16
double result = 0.0;
double expected = 0.698970;
test_calculator("log(5)", "0", &result, &expected);

#test expression_17
double result = 0.0;
double expected = 512;
test_calculator("2^3^2", "0", &result, &expected);

#test expression_18
double result = 0.0;
double expected = 501.029639;
test_calculator("2 + 2^3^2 - 14 + tan(0.8)", "0", &result, &expected);

#test expression_19
double result = 0.0;
double expected = 11.585040;
test_calculator("(1+2)*4*cos(x*7-2)+sin(2*x)", "3", &result, &expected);

#test expression_20
double result = 0.0;
int expected_code = 1;
test_input("(1+2)*4*cs(x*7-2)+sn(2*x)", "3", &result, &expected_code);

#test expression_21
double result = 0.0;
int expected_code = 1;
test_input("(2+3/2)m2", "0", &result, &expected_code);

#test expression_22
double result = 0.0;
int expected_code = 1;
test_input("lg(5)", "0", &result, &expected_code);

#test expression_23
double result = 0.0;
int expected_code = 1;
test_input("4mo", "0", &result, &expected_code);

#test expression_24
double result = 0.0;
int expected_code = 1;
test_input("acs(0.2)", "0", &result, &expected_code);

#test expression_25
double result = 0.0;
int expected_code = 0;
test_input("tan(0.8)", "0", &result, &expected_code);

#test expression_26
float principal = 54578364.0;
float interest_rate = 12.0;
int term = 6;
const char payment_type[255] = "annuity";
float payment = 0.0, overpayment = 0.0, total_payment = 0.0;
float expected_payment = 1067018.125000;
float expected_overpayment = 22246948.000000;
float expected_total_payment = 76825312.000000;
test_credit_calculator(principal, interest_rate, term, payment_type, &payment, &overpayment, &total_payment, &expected_payment, &expected_overpayment, &expected_total_payment);

#test expression_27
float principal = 3000000.0;
float interest_rate = 14.0;
int term = 4;
const char payment_type[255] = "differential";
float payment = 0.0, overpayment = 0.0, total_payment = 0.0;
float expected_payment = 63229.167969;
float expected_overpayment = 857500.000000;
float expected_total_payment = 3857500.000000;
test_credit_calculator(principal, interest_rate, term, payment_type, &payment, &overpayment, &total_payment, &expected_payment, &expected_overpayment, &expected_total_payment);
